Topic-2(if-else)
==================

1.All arithmetic operations
-----------------------------

echo "Enter two numbers: "
read a b
sum=$((a+b))
sub=$((a-b))
mul=$((a*b))
div=$((a/b))
echo "Addition: "+$sum
echo "Subtraction: "+$sub
echo "Multiplication: "+$mul
echo "Division:" +$div


2.Greatest & least of among 3 nos.
-----------------------------------

echo "Enter three numnbers: "
read a b c
if [ $a -gt $b ]; then
    if [ $a -gt $c ]; then
        echo "$a is greater"
    else
        echo "$c is greater"
    fi
else
    if [ $b -gt $c ]; then
        echo "$b is greater"
    else
        echo "$c is greater"
    fi
fi


3. Leap year
-------------

echo "Enter a year: "
read y
if [ `expr $y % 4` -eq 0 -a `expr $y % 100` -ne 0 -o `expr $y % 400` -eq 0 ]; then
    echo "$y is a leap year"
else
    echo "$y is not a leap year"


4.Grade Calculation
---------------------

echo "Enter marks: "
read n
if [ $n -gt 90 -a $n -le 100 ]; then
    echo "Grade A"
elif [ $n -gt 80 -a $n -le 90 ]; then
    echo "Grade B"
elif [ $n -gt 70 -a $n -le 80 ]; then
    echo "Grade C"
elif [ $n -gt 60 -a $n -le 70 ]; then
    echo "Grade D"
elif [ $n -gt 50 -a $n -le 60 ]; then
    echo "Grade E"
else
    echo "FAIL"


5. Electric bill Calculation
----------------------------

echo -----------------------
echo "\tCalculate Electricity charge"
echo -----------------------
echo "Enter the unit" 
read unit
if [ $unit -gt 0 ] && [ $unit -le 50 ]; then
    charge=$((unit*75/100))
    echo $charge
elif [ $unit -gt 50 ] && [ $unit -le 150 ]; then
    charge=$(((unit-50)*130/100+50*75/100))
    echo $charge
elif [ $unit -gt 150 ] && [ $unit -le 250 ]; then
    charge=$(((unit-150)*145/100+50*75/100+100*130/100))
    echo $charge
elif [ $unit -gt 250 ]; then
    charge=$(((unit-250)*155/100+50*75/100+100"130/100+100*145/100))
    echo $charge
fi
t=$(($charge*125/100))
echo -----------------------
echo "\tElectricity Billing"
echo -----------------------
echo "Unit: $unit"
echo "Charge: $t"


Topic 3-(While & for loop, command line arguments)
===================================================

1. Fibonacci series(up-to range/term)
------------------------------------
fibonacci(){
    n=$1
    a=0
    b=1
    echo "Fibonacci series: "
    if [ $n -eq 1 ]; then
        echo "hi"
        echo "$a"
    elif [ $n -eq 2 ];  then
        echo "$b $a"
    elif [ $n -ge  3 ]; then
        for((i=0;i<n;i++))
        do
            echo -n "$a "
            c=$((a+b))
            a=$b
            b=$c
        done
    fi
}

echo "Enter the limit: "
read n
fibonacci $n

2. Palindrome
--------------
palindrome(){
    n=$1
    r=0
    temp=$n
    while [ $temp -ne 0 ]
    do
        digit=$(( temp%10 ))
        r=$(( r*10+digit ))
        temp=$(( temp/10 ))
    done
    if [ $r -eq $n ]; then
        echo "Palindrome"
    else
        echo "Not Palindrome"
    fi
}
echo "Enter the number: "
read n
palindrome $n

3. GCD and LCM
--------------
evaluateGcdLcm(){
    a=$1
    b=$2
    temp=$((a*b))
    if [ $a -eq 0 -o $b -eq 0 ]; then
        echo "0"
    else
        while [ $a -ne $b ]
        do
            if [ $a -gt $b ]; then
                a=$((a-b))
            else
                b=$((b-a))
            fi
        done
    fi
    echo "GCD: $b"
    lcm=$((temp/$b))
    echo "LCM: $lcm"
}

echo "Enter two numbers: "
read a b
evaluateGcdLcm $a $b

4.Armstrong
-----------
armstrong(){
    n=$1
    sum=0
    len=0
    temp=$n
    while [ $n -gt 0 ]
    do
        n=$((n/10))
        len=$((len+1))
    done
    n=$temp
    while [ $temp -gt 0 ]
    do
        digit=$((temp%10))
        sum=$((sum+digit**len))
        temp=$((temp/10))
    done
    if [ $sum -eq $n ]
    then
        echo "$n is an armstrong number"
    else
        echo "$n is not an armstrong number"
    fi
}

echo "Enter a number: "
read n
armstrong $n

5.Pattern
---------
i.    *             ii.  ****
     ***                 ***
    *****                **
   *******               *

pattern1(){
    n=$1
    for (( i=1;i<=n;i++ ))
    do
        for (( j=n-i;j>=1;j-- ))
	    do
		    echo -n " "
	    done
	    for (( k=1;k<=2*i-1;k++ ))
	    do
	    	echo -n "*"
	    done
	    echo ""
    done
            
}

pattern2(){
    n=$1
    for (( i=n;i>=1;i-- ))
    do
        for (( j=i;j>=1;j-- ))
        do
            echo -n "*"
        done
        echo ""
    done
}

echo "Enter number of rows: "
read n
pattern1 $n
echo "$n"
pattern2 $n


Topic 4-(bc calculator,function, recursion)
=========================================== 

1.Area of triangle
------------------

area(){
    a=$1
    b=$2
    c=$3
    s=`echo "scale=4; $a+$b+$c" | bc`
    s=`echo "scale=4; $s/2" | bc`
    area=`echo "scale=4; $s*($s-$a)*($s-$b)*($s-$c)" | bc`
    area=`echo "scale=4; sqrt($area)" | bc`
    echo $area
}
triangle(){
    a=$1
    b=$2
    c=$3
    if [ `expr $a + $b` -gt $c -a `expr $c + $b` -gt $a -a `expr $a + $c` -gt $b ]
    then 
        area $a $b $c
    else
        echo "Invalid triangle"
    fi
}

triangle $1 $2 $3

OR

clear
printf "Enter 3 sides of a triangle = "
read a b c
if [ $(( a+b )) -gt $c -a $(( b+c )) -gt $a -a $((  a+c )) -gt $b ]
then
	echo "Triangle can be formed"
	s=`echo "scale=3; ($a+$b+$c)/2"|bc`
	temp=`echo "scale=3; $s*($s-$a)*($s-$b)*($s-$c)"|bc`
	ar=`echo "scale=3; sqrt($temp) "|bc`
	echo "$ar"
else
	echo "Triangle can not be formed"
fi


2.Factorial with recursion
----------------------------
factorial()
{
	n=$1
	if [ $n -le 0 ]
	then 
		echo 1
	else
		echo $(( n * `factorial $(( n-1 ))` ))
	fi
}
echo "Enter a number: "
read n
factorial $n

3. series
----------

factorial()
{
	n=$1
	if [ $n -le 0 ]
	then 
		echo 1
	else
		echo $(( n * `factorial $(( n-1 ))` ))
	fi
}
series(){
    x=$1
    n=$2
    sum=0
    p=0
    for (( i=1;i<n=;i++ ))
    do
        fact=`factorial $p`
        temp=`echo "scale=4; $x^$p" | bc`
        temp=`echo "scale=4; $temp^$fact" | bc`
        sum=`echo "scale=4; $sum^$temp" | bc`
        p=$((p+2))
    done
    echo "sum = $sum"
}
series $1 $2

4. Pascal triangle
--------------------

echo "enter number of rows : "
read rows
coef=1
for (( i=0;i<rows;i++ ))
do
  for (( space=1;space<=rows-i;space++ ))
  do
    echo -n "  "
  done
  for (( j=0;j<=i;j++ ))
  do
    if [ $j -eq 0 -o $i -eq 0 ]
    then
        coef=1;
    else
        coef=$((coef*(i-j+1)/j))
    fi
    echo -n $coef "   "
  done
  echo
done


Topic 5-(case-menu driven)
============================

1. commands(pwd,ps,date etc.) using case
----------------------------------------

echo "1.check the file in the directory"
echo "2.know your present working directory"
echo "3.who is currently logged in"
echo "4.process of your system"
echo "5.exit"
while [ 1 ]
do
    echo "Enter your choice :"
    read x
    case $x in
    1) ls-1 ;;
    2) pwd ;;
    3) who ;;
    4) ps ;;
    5) exit
    esac
done

2. basic calculator('+'.'-',...case)
---------------------------------------

echo "Enter two number: "
read a b
echo "1.Addition"
echo "2.Subtraction"
echo "3.Multiplication"
echo "4.Division"
echo "5.Modulo"
echo "6.exit"
while [ 1 ]
do
    echo "Enter your choice :"
    read x
    case $x in
    1) res=$(( a+b )) 
       echo "Sum: $res";;
    2) res=$(( a-b )) 
       echo "Subtract: $res";;
    3) res=$(( a*b )) 
       echo "Multiply: $res";;
    4) res=$(( a/b )) 
       echo "Division: $res";;
    5) res=$(( a%b )) 
       echo "Modulo: $res";;
    6) exit
    esac
    echo ""
done

3. Date is valid
------------------

dd=$1
mm=$2
yy=$3
day=0
if [ $mm -le 0 -o $mm -gt 12 ]; then 
    echo "Invalid input"
    exit
fi
case $mm in
    1|3|5|7|8|10|12) day=31;;
    2) day=28;;
    4|6|9|11) day=30;;
    *)day=-1;;
esac
if [ $mm -eq 2 ]; then 
    if [ \( `expr $yy % 100` -ne 0 -o `expr $yy % 400` -eq 0 \) -a `expr $yy % 4` -eq 0 ] 
    then
	    feb=29
    else
    	feb=28
    fi
fi
if [ $dd -le 0 -o $dd -gt $day ]
then
    echo "Date is invalid"
    exit
fi
echo "Date is valid"


4. alid or not
----------------



5. number to word 
------------------

echo -n "Enter number: "
read n
 
len=$(echo $n | wc -c)
len=$(( $len - 1 ))
 
echo "Your number $n in words : "
for (( i=1; i<=$len; i++ ))
do
    digit=$(echo $n | cut -c $i)
    case $digit in
        0) echo -n "zero " ;;
        1) echo -n "one " ;;
        2) echo -n "two " ;;
        3) echo -n "three " ;;
        4) echo -n "four " ;;
        5) echo -n "five " ;;
        6) echo -n "six " ;;
        7) echo -n "seven " ;;
        8) echo -n "eight " ;;
        9) echo -n "nine " ;;
    esac	
done
        
Topic-6 (Array,IFS)
======================

1.Searching
---------------

echo "Enter size of the array: "
read n
echo "Enter elements: "
for (( i=0;i<n;i++ ))
do
    read arr[$i]
done
echo "Enter the element to be searched: "
read item
c=0
for (( i=0;i<n;i++ ))
do
    if [ ${arr[i]} -eq $item ]; then
        c=1
        echo "$item is found at index $i"
    fi
done
if [ $c -eq 0 ]
then 
    echo "$item not found"
fi

2.Sorting
----------

echo "Enter size of the array: "
read n
echo "Enter elements: "
for (( i=0;i<n;i++ ))
do
    read arr[i]
done
echo "Original array: "
echo ${arr[*]}
for (( i=0;i<n-1;i++ ))
do
    for (( j=0;j<n-i-1;j++ ))
    do
        if [ ${arr[j]} -gt ${arr[j+1]} ]; then
            temp=${arr[j]}
            arr[j]=${arr[j+1]}
            arr[j+1]=$temp
        fi
    done
done
echo "Sorted array: "
echo ${arr[*]}


3.DOB Calculation
-----------------

echo "Enter dob: "
read dob
IFS = "/"
set $dob
d=$1
m=$2
y=$3
dd=`date+%d`
mm=`date+%m`
yy=`date+%Y`
year=`expr $yy -$y`
month=`expr $mm -$m`
day=`expr $dd -$d`
if [ $mm -lt 0 ]
then 
    month=`expr $month+12`
    ((year--))
fi
if [ $day -lt 0 ]
then
    day=`expr $day+30`
    ((month--))
fi
echo "The age is" $year "year " $month "month" $day "day".


OR

clear

#user input
read -p "Enter your dob in dd/mm/yyyy format..." dob
IFS="/"
set $dob
d=$1
m=$2
y=$3

#system date
dd=`date +%d`
mm=`date +%m`
yy=`date +%Y`

d=`expr $dd - $d`
if [ $d -le 0 ]
then
	d=$(( d+30 ))
	mm=$(( mm-1 ))
fi

m=`expr $mm - $m`
if [ $m -le 0 ]
then
	m=$(( m+12 ))
	yy=$(( yy-1 ))
fi

y=$(( yy-y ))

echo "Age is $y years $m months $d days"

        
Topic 7- (File permission,Count on file)
===========================================

2.Count the number of line, word & character of a
      file using wc command 

if [ $# -eq 0 ]; then
    echo "No arguments found"
    exit
fi

for i in $*
do
    if [ -f $i ]; then
        echo "$i is a file"
        echo "No. of lines = $(cat $i|wc -l)"
        echo "No. of words = $(cat $i|wc -w)"
        echo "No. of characters = $(cat $i|wc -c)"
    else
        echo "$i is a directory"
    fi
    echo ""
done

Topic 8-(File read/write)
=========================

1.Grade Calculation
--------------------

10. fork
----------
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>

int main() {
	pid_t pid;
	pid=fork();
	    fork();
	// no. of processes = 2^n where n is number of fork() calls
	// no. of child processes created = 2^n - 1 
	if(pid==0) { //child process 
		printf("Child: child process Id = %d, parent process Id = %d\n",getpid(), getppid());
	}
	else {	//parent process
		wait(NULL);
		printf("Parent: process Id = %d, parent process Id = %d\n",getpid(), getppid());
		printf("New Child = %d\n",pid);
	}
}

Pipe
-----


















        
        
  



































     
    
   








































































































































































































